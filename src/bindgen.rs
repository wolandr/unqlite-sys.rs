// automatically generated by rust-bindgen

pub type __int128_t = ::libc::c_void;
pub type __uint128_t = ::libc::c_void;
pub type __builtin_va_list = [__va_list_tag; 1usize];
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type unqlite_io_methods = Struct_unqlite_io_methods;
pub type unqlite_kv_methods = Struct_unqlite_kv_methods;
pub type unqlite_kv_engine = Struct_unqlite_kv_engine;
pub enum Struct_jx9_io_stream { }
pub type unqlite_io_stream = Struct_jx9_io_stream;
pub enum Struct_jx9_context { }
pub type unqlite_context = Struct_jx9_context;
pub enum Struct_jx9_value { }
pub type unqlite_value = Struct_jx9_value;
pub type unqlite_vfs = Struct_unqlite_vfs;
pub enum Struct_unqlite_vm { }
pub type unqlite_vm = Struct_unqlite_vm;
pub enum Struct_unqlite { }
pub type unqlite = Struct_unqlite;
pub type sxi64 = ::libc::c_longlong;
pub type sxu64 = ::libc::c_ulonglong;
pub type ProcConsumer = ::std::option::Option<extern "C" fn(arg1: *const ::libc::c_void,
                                                              arg2: ::libc::c_uint,
                                                              arg3: *mut ::libc::c_void)
                                                              -> ::libc::c_int>;
pub type SyMutexMethods = Struct_SyMutexMethods;
pub type SyMemMethods = Struct_SyMemMethods;
pub type SyString = Struct_SyString;
pub type syiovec = Struct_syiovec;
pub enum Struct_SyMutex { }
pub type SyMutex = Struct_SyMutex;
pub type Sytm = Struct_Sytm;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_syiovec {
    pub pBase: *mut ::libc::c_void,
    pub nLen: ::libc::c_ulong,
}
impl ::std::clone::Clone for Struct_syiovec {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_syiovec {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_SyString {
    pub zString: *const ::libc::c_char,
    pub nByte: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_SyString {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_SyString {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Sytm {
    pub tm_sec: ::libc::c_int,
    pub tm_min: ::libc::c_int,
    pub tm_hour: ::libc::c_int,
    pub tm_mday: ::libc::c_int,
    pub tm_mon: ::libc::c_int,
    pub tm_year: ::libc::c_int,
    pub tm_wday: ::libc::c_int,
    pub tm_yday: ::libc::c_int,
    pub tm_isdst: ::libc::c_int,
    pub tm_zone: *mut ::libc::c_char,
    pub tm_gmtoff: ::libc::c_long,
}
impl ::std::clone::Clone for Struct_Sytm {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Sytm {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_SyMemMethods {
    pub xAlloc: ::std::option::Option<extern "C" fn(arg1: ::libc::c_uint) -> *mut ::libc::c_void>,
    pub xRealloc: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void,
                                                        arg2: ::libc::c_uint)
                                                        -> *mut ::libc::c_void>,
    pub xFree: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void) -> ()>,
    pub xChunkSize: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void)
                                                          -> ::libc::c_uint>,
    pub xInit: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void) -> ::libc::c_int>,
    pub xRelease: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void) -> ()>,
    pub pUserData: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_SyMemMethods {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_SyMemMethods {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ProcMemError = ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void)
                                                              -> ::libc::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_SyMutexMethods {
    pub xGlobalInit: ::std::option::Option<extern "C" fn() -> ::libc::c_int>,
    pub xGlobalRelease: ::std::option::Option<extern "C" fn() -> ()>,
    pub xNew: ::std::option::Option<extern "C" fn(arg1: ::libc::c_int) -> *mut SyMutex>,
    pub xRelease: ::std::option::Option<extern "C" fn(arg1: *mut SyMutex) -> ()>,
    pub xEnter: ::std::option::Option<extern "C" fn(arg1: *mut SyMutex) -> ()>,
    pub xTryEnter: ::std::option::Option<extern "C" fn(arg1: *mut SyMutex) -> ::libc::c_int>,
    pub xLeave: ::std::option::Option<extern "C" fn(arg1: *mut SyMutex) -> ()>,
}
impl ::std::clone::Clone for Struct_SyMutexMethods {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_SyMutexMethods {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type unqlite_real = ::libc::c_double;
pub type unqlite_int64 = sxi64;
pub type unqlite_file = Struct_unqlite_file;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_unqlite_file {
    pub pMethods: *const unqlite_io_methods,
}
impl ::std::clone::Clone for Struct_unqlite_file {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_unqlite_file {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_unqlite_io_methods {
    pub iVersion: ::libc::c_int,
    pub xClose: ::std::option::Option<extern "C" fn(arg1: *mut unqlite_file) -> ::libc::c_int>,
    pub xRead: ::std::option::Option<extern "C" fn(arg1: *mut unqlite_file,
                                                     arg2: *mut ::libc::c_void,
                                                     iAmt: unqlite_int64,
                                                     iOfst: unqlite_int64)
                                                     -> ::libc::c_int>,
    pub xWrite: ::std::option::Option<extern "C" fn(arg1: *mut unqlite_file,
                                                      arg2: *const ::libc::c_void,
                                                      iAmt: unqlite_int64,
                                                      iOfst: unqlite_int64)
                                                      -> ::libc::c_int>,
    pub xTruncate: ::std::option::Option<extern "C" fn(arg1: *mut unqlite_file,
                                                         size: unqlite_int64)
                                                         -> ::libc::c_int>,
    pub xSync: ::std::option::Option<extern "C" fn(arg1: *mut unqlite_file,
                                                     flags: ::libc::c_int)
                                                     -> ::libc::c_int>,
    pub xFileSize: ::std::option::Option<extern "C" fn(arg1: *mut unqlite_file,
                                                         pSize: *mut unqlite_int64)
                                                         -> ::libc::c_int>,
    pub xLock: ::std::option::Option<extern "C" fn(arg1: *mut unqlite_file, arg2: ::libc::c_int)
                                                     -> ::libc::c_int>,
    pub xUnlock: ::std::option::Option<extern "C" fn(arg1: *mut unqlite_file,
                                                       arg2: ::libc::c_int)
                                                       -> ::libc::c_int>,
    pub xCheckReservedLock: ::std::option::Option<extern "C" fn(arg1: *mut unqlite_file,
                                                                  pResOut: *mut ::libc::c_int)
                                                                  -> ::libc::c_int>,
    pub xSectorSize: ::std::option::Option<extern "C" fn(arg1: *mut unqlite_file) -> ::libc::c_int>,
}
impl ::std::clone::Clone for Struct_unqlite_io_methods {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_unqlite_io_methods {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_unqlite_vfs {
    pub zName: *const ::libc::c_char,
    pub iVersion: ::libc::c_int,
    pub szOsFile: ::libc::c_int,
    pub mxPathname: ::libc::c_int,
    pub xOpen: ::std::option::Option<extern "C" fn(arg1: *mut unqlite_vfs,
                                                     zName: *const ::libc::c_char,
                                                     arg2: *mut unqlite_file,
                                                     flags: ::libc::c_uint)
                                                     -> ::libc::c_int>,
    pub xDelete: ::std::option::Option<extern "C" fn(arg1: *mut unqlite_vfs,
                                                       zName: *const ::libc::c_char,
                                                       syncDir: ::libc::c_int)
                                                       -> ::libc::c_int>,
    pub xAccess: ::std::option::Option<extern "C" fn(arg1: *mut unqlite_vfs,
                                                       zName: *const ::libc::c_char,
                                                       flags: ::libc::c_int,
                                                       pResOut: *mut ::libc::c_int)
                                                       -> ::libc::c_int>,
    pub xFullPathname: ::std::option::Option<extern "C" fn(arg1: *mut unqlite_vfs,
                                                             zName: *const ::libc::c_char,
                                                             buf_len: ::libc::c_int,
                                                             zBuf: *mut ::libc::c_char)
                                                             -> ::libc::c_int>,
    pub xTmpDir: ::std::option::Option<extern "C" fn(arg1: *mut unqlite_vfs,
                                                       zBuf: *mut ::libc::c_char,
                                                       buf_len: ::libc::c_int)
                                                       -> ::libc::c_int>,
    pub xSleep: ::std::option::Option<extern "C" fn(arg1: *mut unqlite_vfs,
                                                      microseconds: ::libc::c_int)
                                                      -> ::libc::c_int>,
    pub xCurrentTime: ::std::option::Option<extern "C" fn(arg1: *mut unqlite_vfs,
                                                            pOut: *mut Sytm)
                                                            -> ::libc::c_int>,
    pub xGetLastError: ::std::option::Option<extern "C" fn(arg1: *mut unqlite_vfs,
                                                             arg2: ::libc::c_int,
                                                             arg3: *mut ::libc::c_char)
                                                             -> ::libc::c_int>,
}
impl ::std::clone::Clone for Struct_unqlite_vfs {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_unqlite_vfs {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pgno = sxu64;
pub type unqlite_page = Struct_unqlite_page;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_unqlite_page {
    pub zData: *mut ::libc::c_uchar,
    pub pUserData: *mut ::libc::c_void,
    pub pgno: pgno,
}
impl ::std::clone::Clone for Struct_unqlite_page {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_unqlite_page {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type unqlite_kv_handle = *mut ::libc::c_void;
pub type unqlite_kv_io = Struct_unqlite_kv_io;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_unqlite_kv_io {
    pub pHandle: unqlite_kv_handle,
    pub pMethods: *mut unqlite_kv_methods,
    pub xGet: ::std::option::Option<extern "C" fn(arg1: unqlite_kv_handle,
                                                  arg2: pgno,
                                                  arg3:
                                                      *mut *mut unqlite_page)
                                        -> ::libc::c_int>,
    pub xLookup: ::std::option::Option<extern "C" fn(arg1: unqlite_kv_handle,
                                                     arg2: pgno,
                                                     arg3:
                                                         *mut *mut unqlite_page)
                                           -> ::libc::c_int>,
    pub xNew: ::std::option::Option<extern "C" fn(arg1: unqlite_kv_handle,
                                                  arg2:
                                                      *mut *mut unqlite_page)
                                        -> ::libc::c_int>,
    pub xWrite: ::std::option::Option<extern "C" fn(arg1: *mut unqlite_page)
                                          -> ::libc::c_int>,
    pub xDontWrite: ::std::option::Option<extern "C" fn(arg1:
                                                            *mut unqlite_page)
                                              -> ::libc::c_int>,
    pub xDontJournal: ::std::option::Option<extern "C" fn(arg1:
                                                              *mut unqlite_page)
                                                -> ::libc::c_int>,
    pub xDontMkHot: ::std::option::Option<extern "C" fn(arg1:
                                                            *mut unqlite_page)
                                              -> ::libc::c_int>,
    pub xPageRef: ::std::option::Option<extern "C" fn(arg1: *mut unqlite_page)
                                            -> ::libc::c_int>,
    pub xPageUnref: ::std::option::Option<extern "C" fn(arg1:
                                                            *mut unqlite_page)
                                              -> ::libc::c_int>,
    pub xPageSize: ::std::option::Option<extern "C" fn(arg1:
                                                           unqlite_kv_handle)
                                             -> ::libc::c_int>,
    pub xReadOnly: ::std::option::Option<extern "C" fn(arg1:
                                                           unqlite_kv_handle)
                                             -> ::libc::c_int>,
    pub xTmpPage: ::std::option::Option<extern "C" fn(arg1: unqlite_kv_handle)
                                            -> *mut ::libc::c_uchar>,
    pub xSetUnpin: ::std::option::Option<extern "C" fn(arg1:
                                                           unqlite_kv_handle,
                                                       xPageUnpin:
                                                           ::std::option::Option<extern "C" fn(arg1:
                                                                                                   *mut ::libc::c_void)
                                                                                     ->
                                                                                         ()>)
                                             -> ()>,
    pub xSetReload: ::std::option::Option<extern "C" fn(arg1:
                                                            unqlite_kv_handle,
                                                        xPageReload:
                                                            ::std::option::Option<extern "C" fn(arg1:
                                                                                                    *mut ::libc::c_void)
                                                                                      ->
                                                                                          ()>)
                                              -> ()>,
    pub xErr: ::std::option::Option<extern "C" fn(arg1: unqlite_kv_handle,
                                                  arg2: *const ::libc::c_char)
                                        -> ()>,
}
impl ::std::clone::Clone for Struct_unqlite_kv_io {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_unqlite_kv_io {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type unqlite_kv_cursor = Struct_unqlite_kv_cursor;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_unqlite_kv_cursor {
    pub pStore: *mut unqlite_kv_engine,
}
impl ::std::clone::Clone for Struct_unqlite_kv_cursor {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_unqlite_kv_cursor {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_unqlite_kv_engine {
    pub pIo: *const unqlite_kv_io,
}
impl ::std::clone::Clone for Struct_unqlite_kv_engine {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_unqlite_kv_engine {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_unqlite_kv_methods {
    pub zName: *const ::libc::c_char,
    pub szKv: ::libc::c_int,
    pub szCursor: ::libc::c_int,
    pub iVersion: ::libc::c_int,
    pub xInit: ::std::option::Option<extern "C" fn(arg1:
                                                       *mut unqlite_kv_engine,
                                                   iPageSize: ::libc::c_int)
                                         -> ::libc::c_int>,
    pub xRelease: ::std::option::Option<extern "C" fn(arg1:
                                                          *mut unqlite_kv_engine)
                                            -> ()>,
    pub xConfig: ::std::option::Option<extern "C" fn(arg1:
                                                         *mut unqlite_kv_engine,
                                                     op: ::libc::c_int,
                                                     ap: va_list)
                                           -> ::libc::c_int>,
    pub xOpen: ::std::option::Option<extern "C" fn(arg1:
                                                       *mut unqlite_kv_engine,
                                                   arg2: pgno)
                                         -> ::libc::c_int>,
    pub xReplace: ::std::option::Option<extern "C" fn(arg1:
                                                          *mut unqlite_kv_engine,
                                                      pKey:
                                                          *const ::libc::c_void,
                                                      nKeyLen: ::libc::c_int,
                                                      pData:
                                                          *const ::libc::c_void,
                                                      nDataLen: unqlite_int64)
                                            -> ::libc::c_int>,
    pub xAppend: ::std::option::Option<extern "C" fn(arg1:
                                                         *mut unqlite_kv_engine,
                                                     pKey:
                                                         *const ::libc::c_void,
                                                     nKeyLen: ::libc::c_int,
                                                     pData:
                                                         *const ::libc::c_void,
                                                     nDataLen: unqlite_int64)
                                           -> ::libc::c_int>,
    pub xCursorInit: ::std::option::Option<extern "C" fn(arg1:
                                                             *mut unqlite_kv_cursor)
                                               -> ()>,
    pub xSeek: ::std::option::Option<extern "C" fn(arg1:
                                                       *mut unqlite_kv_cursor,
                                                   pKey:
                                                       *const ::libc::c_void,
                                                   nByte: ::libc::c_int,
                                                   iPos: ::libc::c_int)
                                         -> ::libc::c_int>,
    pub xFirst: ::std::option::Option<extern "C" fn(arg1:
                                                        *mut unqlite_kv_cursor)
                                          -> ::libc::c_int>,
    pub xLast: ::std::option::Option<extern "C" fn(arg1:
                                                       *mut unqlite_kv_cursor)
                                         -> ::libc::c_int>,
    pub xValid: ::std::option::Option<extern "C" fn(arg1:
                                                        *mut unqlite_kv_cursor)
                                          -> ::libc::c_int>,
    pub xNext: ::std::option::Option<extern "C" fn(arg1:
                                                       *mut unqlite_kv_cursor)
                                         -> ::libc::c_int>,
    pub xPrev: ::std::option::Option<extern "C" fn(arg1:
                                                       *mut unqlite_kv_cursor)
                                         -> ::libc::c_int>,
    pub xDelete: ::std::option::Option<extern "C" fn(arg1:
                                                         *mut unqlite_kv_cursor)
                                           -> ::libc::c_int>,
    pub xKeyLength: ::std::option::Option<extern "C" fn(arg1:
                                                            *mut unqlite_kv_cursor,
                                                        arg2:
                                                            *mut ::libc::c_int)
                                              -> ::libc::c_int>,
    pub xKey: ::std::option::Option<extern "C" fn(arg1:
                                                      *mut unqlite_kv_cursor,
                                                  xConsumer:
                                                      ::std::option::Option<extern "C" fn(arg1:
                                                                                              *const ::libc::c_void,
                                                                                          arg2:
                                                                                              ::libc::c_uint,
                                                                                          arg3:
                                                                                              *mut ::libc::c_void)
                                                                                ->
                                                                                    ::libc::c_int>,
                                                  pUserData:
                                                      *mut ::libc::c_void)
                                        -> ::libc::c_int>,
    pub xDataLength: ::std::option::Option<extern "C" fn(arg1:
                                                             *mut unqlite_kv_cursor,
                                                         arg2:
                                                             *mut unqlite_int64)
                                               -> ::libc::c_int>,
    pub xData: ::std::option::Option<extern "C" fn(arg1:
                                                       *mut unqlite_kv_cursor,
                                                   xConsumer:
                                                       ::std::option::Option<extern "C" fn(arg1:
                                                                                               *const ::libc::c_void,
                                                                                           arg2:
                                                                                               ::libc::c_uint,
                                                                                           arg3:
                                                                                               *mut ::libc::c_void)
                                                                                 ->
                                                                                     ::libc::c_int>,
                                                   pUserData:
                                                       *mut ::libc::c_void)
                                         -> ::libc::c_int>,
    pub xReset: ::std::option::Option<extern "C" fn(arg1:
                                                        *mut unqlite_kv_cursor)
                                          -> ()>,
    pub xCursorRelease: ::std::option::Option<extern "C" fn(arg1:
                                                                *mut unqlite_kv_cursor)
                                                  -> ()>,
}
impl ::std::clone::Clone for Struct_unqlite_kv_methods {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_unqlite_kv_methods {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct___va_list_tag {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[link(name = "unqlite")]
extern "C" {
    pub fn unqlite_open(ppDB: *mut *mut unqlite,
                        zFilename: *const ::libc::c_char,
                        iMode: ::libc::c_uint)
                        -> ::libc::c_int;
    pub fn unqlite_config(pDb: *mut unqlite, nOp: ::libc::c_int, ...) -> ::libc::c_int;
    pub fn unqlite_close(pDb: *mut unqlite) -> ::libc::c_int;
    pub fn unqlite_kv_store(pDb: *mut unqlite,
                            pKey: *const ::libc::c_void,
                            nKeyLen: ::libc::c_int,
                            pData: *const ::libc::c_void,
                            nDataLen: unqlite_int64)
                            -> ::libc::c_int;
    pub fn unqlite_kv_append(pDb: *mut unqlite,
                             pKey: *const ::libc::c_void,
                             nKeyLen: ::libc::c_int,
                             pData: *const ::libc::c_void,
                             nDataLen: unqlite_int64)
                             -> ::libc::c_int;
    pub fn unqlite_kv_store_fmt(pDb: *mut unqlite,
                                pKey: *const ::libc::c_void,
                                nKeyLen: ::libc::c_int,
                                zFormat: *const ::libc::c_char,
                                ...)
                                -> ::libc::c_int;
    pub fn unqlite_kv_append_fmt(pDb: *mut unqlite,
                                 pKey: *const ::libc::c_void,
                                 nKeyLen: ::libc::c_int,
                                 zFormat: *const ::libc::c_char,
                                 ...)
                                 -> ::libc::c_int;
    pub fn unqlite_kv_fetch(pDb: *mut unqlite,
                            pKey: *const ::libc::c_void,
                            nKeyLen: ::libc::c_int,
                            pBuf: *mut ::libc::c_void,
                            pBufLen: *mut unqlite_int64)
                            -> ::libc::c_int;
    pub fn unqlite_kv_fetch_callback(pDb: *mut unqlite,
                                     pKey: *const ::libc::c_void,
                                     nKeyLen: ::libc::c_int,
                                     xConsumer:
                                         ::std::option::Option<extern "C" fn(arg1:
                                                                                 *const ::libc::c_void,
                                                                             arg2:
                                                                                 ::libc::c_uint,
                                                                             arg3:
                                                                                 *mut ::libc::c_void)
                                                                   ->
                                                                       ::libc::c_int>,
                                     pUserData: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn unqlite_kv_delete(pDb: *mut unqlite,
                             pKey: *const ::libc::c_void,
                             nKeyLen: ::libc::c_int)
                             -> ::libc::c_int;
    pub fn unqlite_kv_config(pDb: *mut unqlite, iOp: ::libc::c_int, ...) -> ::libc::c_int;
    pub fn unqlite_compile(pDb: *mut unqlite,
                           zJx9: *const ::libc::c_char,
                           nByte: ::libc::c_int,
                           ppOut: *mut *mut unqlite_vm)
                           -> ::libc::c_int;
    pub fn unqlite_compile_file(pDb: *mut unqlite,
                                zPath: *const ::libc::c_char,
                                ppOut: *mut *mut unqlite_vm)
                                -> ::libc::c_int;
    pub fn unqlite_vm_config(pVm: *mut unqlite_vm, iOp: ::libc::c_int, ...) -> ::libc::c_int;
    pub fn unqlite_vm_exec(pVm: *mut unqlite_vm) -> ::libc::c_int;
    pub fn unqlite_vm_reset(pVm: *mut unqlite_vm) -> ::libc::c_int;
    pub fn unqlite_vm_release(pVm: *mut unqlite_vm) -> ::libc::c_int;
    pub fn unqlite_vm_dump(pVm: *mut unqlite_vm,
                           xConsumer:
                               ::std::option::Option<extern "C" fn(arg1:
                                                                       *const ::libc::c_void,
                                                                   arg2:
                                                                       ::libc::c_uint,
                                                                   arg3:
                                                                       *mut ::libc::c_void)
                                                         -> ::libc::c_int>,
                           pUserData: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn unqlite_vm_extract_variable(pVm: *mut unqlite_vm,
                                       zVarname: *const ::libc::c_char)
                                       -> *mut unqlite_value;
    pub fn unqlite_kv_cursor_init(pDb: *mut unqlite,
                                  ppOut: *mut *mut unqlite_kv_cursor)
                                  -> ::libc::c_int;
    pub fn unqlite_kv_cursor_release(pDb: *mut unqlite,
                                     pCur: *mut unqlite_kv_cursor)
                                     -> ::libc::c_int;
    pub fn unqlite_kv_cursor_seek(pCursor: *mut unqlite_kv_cursor,
                                  pKey: *const ::libc::c_void,
                                  nKeyLen: ::libc::c_int,
                                  iPos: ::libc::c_int)
                                  -> ::libc::c_int;
    pub fn unqlite_kv_cursor_first_entry(pCursor: *mut unqlite_kv_cursor) -> ::libc::c_int;
    pub fn unqlite_kv_cursor_last_entry(pCursor: *mut unqlite_kv_cursor) -> ::libc::c_int;
    pub fn unqlite_kv_cursor_valid_entry(pCursor: *mut unqlite_kv_cursor) -> ::libc::c_int;
    pub fn unqlite_kv_cursor_next_entry(pCursor: *mut unqlite_kv_cursor) -> ::libc::c_int;
    pub fn unqlite_kv_cursor_prev_entry(pCursor: *mut unqlite_kv_cursor) -> ::libc::c_int;
    pub fn unqlite_kv_cursor_key(pCursor: *mut unqlite_kv_cursor,
                                 pBuf: *mut ::libc::c_void,
                                 pnByte: *mut ::libc::c_int)
                                 -> ::libc::c_int;
    pub fn unqlite_kv_cursor_key_callback(pCursor: *mut unqlite_kv_cursor,
                                          xConsumer:
                                              ::std::option::Option<extern "C" fn(arg1:
                                                                                      *const ::libc::c_void,
                                                                                  arg2:
                                                                                      ::libc::c_uint,
                                                                                  arg3:
                                                                                      *mut ::libc::c_void)
                                                                        ->
                                                                            ::libc::c_int>,
                                          pUserData: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn unqlite_kv_cursor_data(pCursor: *mut unqlite_kv_cursor,
                                  pBuf: *mut ::libc::c_void,
                                  pnData: *mut unqlite_int64)
                                  -> ::libc::c_int;
    pub fn unqlite_kv_cursor_data_callback(pCursor: *mut unqlite_kv_cursor,
                                           xConsumer:
                                               ::std::option::Option<extern "C" fn(arg1:
                                                                                       *const ::libc::c_void,
                                                                                   arg2:
                                                                                       ::libc::c_uint,
                                                                                   arg3:
                                                                                       *mut ::libc::c_void)
                                                                         ->
                                                                             ::libc::c_int>,
                                           pUserData: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn unqlite_kv_cursor_delete_entry(pCursor: *mut unqlite_kv_cursor) -> ::libc::c_int;
    pub fn unqlite_kv_cursor_reset(pCursor: *mut unqlite_kv_cursor) -> ::libc::c_int;
    pub fn unqlite_begin(pDb: *mut unqlite) -> ::libc::c_int;
    pub fn unqlite_commit(pDb: *mut unqlite) -> ::libc::c_int;
    pub fn unqlite_rollback(pDb: *mut unqlite) -> ::libc::c_int;
    pub fn unqlite_util_load_mmaped_file(zFile: *const ::libc::c_char,
                                         ppMap: *mut *mut ::libc::c_void,
                                         pFileSize: *mut unqlite_int64)
                                         -> ::libc::c_int;
    pub fn unqlite_util_release_mmaped_file(pMap: *mut ::libc::c_void,
                                            iFileSize: unqlite_int64)
                                            -> ::libc::c_int;
    pub fn unqlite_util_random_string(pDb: *mut unqlite,
                                      zBuf: *mut ::libc::c_char,
                                      buf_size: ::libc::c_uint)
                                      -> ::libc::c_int;
    pub fn unqlite_util_random_num(pDb: *mut unqlite) -> ::libc::c_uint;
    pub fn unqlite_create_function(pVm: *mut unqlite_vm,
                                   zName: *const ::libc::c_char,
                                   xFunc:
                                       ::std::option::Option<extern "C" fn(arg1:
                                                                               *mut unqlite_context,
                                                                           arg2:
                                                                               ::libc::c_int,
                                                                           arg3:
                                                                               *mut *mut unqlite_value)
                                                                 ->
                                                                     ::libc::c_int>,
                                   pUserData: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn unqlite_delete_function(pVm: *mut unqlite_vm,
                                   zName: *const ::libc::c_char)
                                   -> ::libc::c_int;
    pub fn unqlite_create_constant(pVm: *mut unqlite_vm,
                                   zName: *const ::libc::c_char,
                                   xExpand:
                                       ::std::option::Option<extern "C" fn(arg1:
                                                                               *mut unqlite_value,
                                                                           arg2:
                                                                               *mut ::libc::c_void)
                                                                 -> ()>,
                                   pUserData: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn unqlite_delete_constant(pVm: *mut unqlite_vm,
                                   zName: *const ::libc::c_char)
                                   -> ::libc::c_int;
    pub fn unqlite_vm_new_scalar(pVm: *mut unqlite_vm) -> *mut unqlite_value;
    pub fn unqlite_vm_new_array(pVm: *mut unqlite_vm) -> *mut unqlite_value;
    pub fn unqlite_vm_release_value(pVm: *mut unqlite_vm,
                                    pValue: *mut unqlite_value)
                                    -> ::libc::c_int;
    pub fn unqlite_context_new_scalar(pCtx: *mut unqlite_context) -> *mut unqlite_value;
    pub fn unqlite_context_new_array(pCtx: *mut unqlite_context) -> *mut unqlite_value;
    pub fn unqlite_context_release_value(pCtx: *mut unqlite_context,
                                         pValue: *mut unqlite_value)
                                         -> ();
    pub fn unqlite_value_int(pVal: *mut unqlite_value, iValue: ::libc::c_int) -> ::libc::c_int;
    pub fn unqlite_value_int64(pVal: *mut unqlite_value, iValue: unqlite_int64) -> ::libc::c_int;
    pub fn unqlite_value_bool(pVal: *mut unqlite_value, iBool: ::libc::c_int) -> ::libc::c_int;
    pub fn unqlite_value_null(pVal: *mut unqlite_value) -> ::libc::c_int;
    pub fn unqlite_value_double(pVal: *mut unqlite_value,
                                Value: ::libc::c_double)
                                -> ::libc::c_int;
    pub fn unqlite_value_string(pVal: *mut unqlite_value,
                                zString: *const ::libc::c_char,
                                nLen: ::libc::c_int)
                                -> ::libc::c_int;
    pub fn unqlite_value_string_format(pVal: *mut unqlite_value,
                                       zFormat: *const ::libc::c_char,
                                       ...)
                                       -> ::libc::c_int;
    pub fn unqlite_value_reset_string_cursor(pVal: *mut unqlite_value) -> ::libc::c_int;
    pub fn unqlite_value_resource(pVal: *mut unqlite_value,
                                  pUserData: *mut ::libc::c_void)
                                  -> ::libc::c_int;
    pub fn unqlite_value_release(pVal: *mut unqlite_value) -> ::libc::c_int;
    pub fn unqlite_value_to_int(pValue: *mut unqlite_value) -> ::libc::c_int;
    pub fn unqlite_value_to_bool(pValue: *mut unqlite_value) -> ::libc::c_int;
    pub fn unqlite_value_to_int64(pValue: *mut unqlite_value) -> unqlite_int64;
    pub fn unqlite_value_to_double(pValue: *mut unqlite_value) -> ::libc::c_double;
    pub fn unqlite_value_to_string(pValue: *mut unqlite_value,
                                   pLen: *mut ::libc::c_int)
                                   -> *const ::libc::c_char;
    pub fn unqlite_value_to_resource(pValue: *mut unqlite_value) -> *mut ::libc::c_void;
    pub fn unqlite_value_compare(pLeft: *mut unqlite_value,
                                 pRight: *mut unqlite_value,
                                 bStrict: ::libc::c_int)
                                 -> ::libc::c_int;
    pub fn unqlite_result_int(pCtx: *mut unqlite_context, iValue: ::libc::c_int) -> ::libc::c_int;
    pub fn unqlite_result_int64(pCtx: *mut unqlite_context,
                                iValue: unqlite_int64)
                                -> ::libc::c_int;
    pub fn unqlite_result_bool(pCtx: *mut unqlite_context, iBool: ::libc::c_int) -> ::libc::c_int;
    pub fn unqlite_result_double(pCtx: *mut unqlite_context,
                                 Value: ::libc::c_double)
                                 -> ::libc::c_int;
    pub fn unqlite_result_null(pCtx: *mut unqlite_context) -> ::libc::c_int;
    pub fn unqlite_result_string(pCtx: *mut unqlite_context,
                                 zString: *const ::libc::c_char,
                                 nLen: ::libc::c_int)
                                 -> ::libc::c_int;
    pub fn unqlite_result_string_format(pCtx: *mut unqlite_context,
                                        zFormat: *const ::libc::c_char,
                                        ...)
                                        -> ::libc::c_int;
    pub fn unqlite_result_value(pCtx: *mut unqlite_context,
                                pValue: *mut unqlite_value)
                                -> ::libc::c_int;
    pub fn unqlite_result_resource(pCtx: *mut unqlite_context,
                                   pUserData: *mut ::libc::c_void)
                                   -> ::libc::c_int;
    pub fn unqlite_value_is_int(pVal: *mut unqlite_value) -> ::libc::c_int;
    pub fn unqlite_value_is_float(pVal: *mut unqlite_value) -> ::libc::c_int;
    pub fn unqlite_value_is_bool(pVal: *mut unqlite_value) -> ::libc::c_int;
    pub fn unqlite_value_is_string(pVal: *mut unqlite_value) -> ::libc::c_int;
    pub fn unqlite_value_is_null(pVal: *mut unqlite_value) -> ::libc::c_int;
    pub fn unqlite_value_is_numeric(pVal: *mut unqlite_value) -> ::libc::c_int;
    pub fn unqlite_value_is_callable(pVal: *mut unqlite_value) -> ::libc::c_int;
    pub fn unqlite_value_is_scalar(pVal: *mut unqlite_value) -> ::libc::c_int;
    pub fn unqlite_value_is_json_array(pVal: *mut unqlite_value) -> ::libc::c_int;
    pub fn unqlite_value_is_json_object(pVal: *mut unqlite_value) -> ::libc::c_int;
    pub fn unqlite_value_is_resource(pVal: *mut unqlite_value) -> ::libc::c_int;
    pub fn unqlite_value_is_empty(pVal: *mut unqlite_value) -> ::libc::c_int;
    pub fn unqlite_array_fetch(pArray: *mut unqlite_value,
                               zKey: *const ::libc::c_char,
                               nByte: ::libc::c_int)
                               -> *mut unqlite_value;
    pub fn unqlite_array_walk(pArray: *mut unqlite_value,
                              xWalk:
                                  ::std::option::Option<extern "C" fn(arg1:
                                                                          *mut unqlite_value,
                                                                      arg2:
                                                                          *mut unqlite_value,
                                                                      arg3:
                                                                          *mut ::libc::c_void)
                                                            -> ::libc::c_int>,
                              pUserData: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn unqlite_array_add_elem(pArray: *mut unqlite_value,
                                  pKey: *mut unqlite_value,
                                  pValue: *mut unqlite_value)
                                  -> ::libc::c_int;
    pub fn unqlite_array_add_strkey_elem(pArray: *mut unqlite_value,
                                         zKey: *const ::libc::c_char,
                                         pValue: *mut unqlite_value)
                                         -> ::libc::c_int;
    pub fn unqlite_array_count(pArray: *mut unqlite_value) -> ::libc::c_int;
    pub fn unqlite_context_output(pCtx: *mut unqlite_context,
                                  zString: *const ::libc::c_char,
                                  nLen: ::libc::c_int)
                                  -> ::libc::c_int;
    pub fn unqlite_context_output_format(pCtx: *mut unqlite_context,
                                         zFormat: *const ::libc::c_char,
                                         ...)
                                         -> ::libc::c_int;
    pub fn unqlite_context_throw_error(pCtx: *mut unqlite_context,
                                       iErr: ::libc::c_int,
                                       zErr: *const ::libc::c_char)
                                       -> ::libc::c_int;
    pub fn unqlite_context_throw_error_format(pCtx: *mut unqlite_context,
                                              iErr: ::libc::c_int,
                                              zFormat: *const ::libc::c_char,
                                              ...)
                                              -> ::libc::c_int;
    pub fn unqlite_context_random_num(pCtx: *mut unqlite_context) -> ::libc::c_uint;
    pub fn unqlite_context_random_string(pCtx: *mut unqlite_context,
                                         zBuf: *mut ::libc::c_char,
                                         nBuflen: ::libc::c_int)
                                         -> ::libc::c_int;
    pub fn unqlite_context_user_data(pCtx: *mut unqlite_context) -> *mut ::libc::c_void;
    pub fn unqlite_context_push_aux_data(pCtx: *mut unqlite_context,
                                         pUserData: *mut ::libc::c_void)
                                         -> ::libc::c_int;
    pub fn unqlite_context_peek_aux_data(pCtx: *mut unqlite_context) -> *mut ::libc::c_void;
    pub fn unqlite_context_result_buf_length(pCtx: *mut unqlite_context) -> ::libc::c_uint;
    pub fn unqlite_function_name(pCtx: *mut unqlite_context) -> *const ::libc::c_char;
    pub fn unqlite_context_alloc_chunk(pCtx: *mut unqlite_context,
                                       nByte: ::libc::c_uint,
                                       ZeroChunk: ::libc::c_int,
                                       AutoRelease: ::libc::c_int)
                                       -> *mut ::libc::c_void;
    pub fn unqlite_context_realloc_chunk(pCtx: *mut unqlite_context,
                                         pChunk: *mut ::libc::c_void,
                                         nByte: ::libc::c_uint)
                                         -> *mut ::libc::c_void;
    pub fn unqlite_context_free_chunk(pCtx: *mut unqlite_context,
                                      pChunk: *mut ::libc::c_void)
                                      -> ();
    pub fn unqlite_lib_config(nConfigOp: ::libc::c_int, ...) -> ::libc::c_int;
    pub fn unqlite_lib_init() -> ::libc::c_int;
    pub fn unqlite_lib_shutdown() -> ::libc::c_int;
    pub fn unqlite_lib_is_threadsafe() -> ::libc::c_int;
    pub fn unqlite_lib_version() -> *const ::libc::c_char;
    pub fn unqlite_lib_signature() -> *const ::libc::c_char;
    pub fn unqlite_lib_ident() -> *const ::libc::c_char;
    pub fn unqlite_lib_copyright() -> *const ::libc::c_char;
}
